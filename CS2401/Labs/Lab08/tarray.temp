//Template Implimentation File 
//Lab 8



template<class T>
Tarray<T>::Tarray() {
    used = 0;
    current_index = 0;
    capacity = 5;
    data = new T[capacity];
}

template<class T>
void Tarray<T>::add(T item) {
    if (used == capacity) {
        resize();
    }
    data[used] = item;
    used++;
}

template<class T>
void Tarray<T>::start() {
    current_index = 0;
}

template<class T>
bool Tarray<T>::is_item()const {
    if (current_index < used) {
        return true;
    } else {return false;}
}

template <class T>
void Tarray<T>::advance() {
    current_index++;
}

template <class T>
T Tarray<T>::current()const {
    T tmp;
    if (is_item()) {
    return data[current_index];
    } else {return tmp;}
}

template <class T>
void Tarray<T>::remove_current() {
    for (current_index; is_item(); advance()) {
        data[current_index] = data[current_index +1];
    }
    used--;
}

template <class T>
void Tarray<T>::resize() {
    T* tmp;
    int counter = 0;
    tmp = new T[capacity + 5];
    for (start(); is_item(); advance()) {
        tmp[counter] = data[counter];
        counter++;
    }
    delete []data;
    data = tmp;
    capacity += 5;
}